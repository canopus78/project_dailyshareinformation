name: Stock Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      tickers:
        description: 'Stock tickers (comma-separated, e.g. AAPL,GOOGL,MSFT)'
        required: true
        default: 'AAPL,GOOGL,MSFT'
        type: string
      
      max_stocks:
        description: 'Maximum stocks to analyze'
        required: false
        default: '3'
        type: choice
        options:
        - '3'
        - '5'
        - '8'
      
      analysis_mode:
        description: 'Analysis mode'
        required: false
        default: 'standard'
        type: choice
        options:
        - 'quick'
        - 'standard'
        - 'detailed'

jobs:
  analyze-stocks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify environment
      run: |
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        ls -la
        echo "Python files found:"
        find . -name "*.py" -type f | head -10
    
    - name: Check API key
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "ERROR: OPENAI_API_KEY not found in repository secrets!"
          echo "Please add your OpenAI API key to repository secrets."
          exit 1
        else
          echo "API key found - ready to proceed"
        fi
    
    - name: Create custom runner script
      run: |
        echo 'import os' > run_analysis.py
        echo 'import sys' >> run_analysis.py
        echo 'sys.path.append("src")' >> run_analysis.py
        echo '' >> run_analysis.py
        echo 'def main():' >> run_analysis.py
        echo '    try:' >> run_analysis.py
        echo '        from config.settings import settings' >> run_analysis.py
        echo '        from src.analyzer import YahooFinanceNewsAnalyzer' >> run_analysis.py
        echo '        from src.utils import setup_logging' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        setup_logging()' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        # Get parameters from environment' >> run_analysis.py
        echo '        tickers_input = os.getenv("INPUT_TICKERS", "AAPL,GOOGL,MSFT")' >> run_analysis.py
        echo '        max_stocks = int(os.getenv("INPUT_MAX_STOCKS", "3"))' >> run_analysis.py
        echo '        mode = os.getenv("INPUT_MODE", "standard")' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        # Process tickers' >> run_analysis.py
        echo '        tickers = [t.strip().upper() for t in tickers_input.split(",")]' >> run_analysis.py
        echo '        tickers = tickers[:max_stocks]' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        print(f"Analyzing tickers: {tickers}")' >> run_analysis.py
        echo '        print(f"Mode: {mode}")' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        # Adjust settings based on mode' >> run_analysis.py
        echo '        if mode == "quick":' >> run_analysis.py
        echo '            settings.MAX_TOKENS = 1500' >> run_analysis.py
        echo '        elif mode == "detailed":' >> run_analysis.py
        echo '            settings.MAX_TOKENS = 3000' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        # Run analysis' >> run_analysis.py
        echo '        analyzer = YahooFinanceNewsAnalyzer()' >> run_analysis.py
        echo '        results = analyzer.run_complete_analysis(tickers)' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '        print("Analysis completed successfully!")' >> run_analysis.py
        echo '        print(f"Analyzed {len(results[\'individual_analyses\'])} stocks")' >> run_analysis.py
        echo '        ' >> run_analysis.py
        echo '    except Exception as e:' >> run_analysis.py
        echo '        print(f"Error: {str(e)}")' >> run_analysis.py
        echo '        import traceback' >> run_analysis.py
        echo '        traceback.print_exc()' >> run_analysis.py
        echo '        sys.exit(1)' >> run_analysis.py
        echo '' >> run_analysis.py
        echo 'if __name__ == "__main__":' >> run_analysis.py
        echo '    main()' >> run_analysis.py
    
    - name: Run stock analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        INPUT_TICKERS: ${{ github.event.inputs.tickers }}
        INPUT_MAX_STOCKS: ${{ github.event.inputs.max_stocks }}
        INPUT_MODE: ${{ github.event.inputs.analysis_mode }}
      run: |
        echo "Starting analysis with parameters:"
        echo "Tickers: $INPUT_TICKERS"
        echo "Max stocks: $INPUT_MAX_STOCKS"
        echo "Mode: $INPUT_MODE"
        echo "===================="
        
        python run_analysis.py
    
    - name: Check results
      if: always()
      run: |
        echo "Checking generated files..."
        
        if [ -d "analysis" ]; then
          echo "Analysis directory contents:"
          ls -la analysis/ || echo "Analysis directory is empty"
          analysis_files=$(find analysis/ -type f | wc -l)
          echo "Analysis files count: $analysis_files"
        else
          echo "Analysis directory not found"
        fi
        
        if [ -d "charts" ]; then
          echo "Charts directory contents:"
          ls -la charts/ || echo "Charts directory is empty"
          chart_files=$(find charts/ -type f | wc -l)
          echo "Chart files count: $chart_files"
        else
          echo "Charts directory not found"
        fi
    
    - name: Commit results
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add analysis/ charts/ data/ 2>/dev/null || true
        
        # Check if there are changes
        if ! git diff --staged --quiet; then
          timestamp=$(date '+%Y%m%d_%H%M%S')
          git commit -m "Stock analysis results: ${{ github.event.inputs.tickers }} - $timestamp"
          git push
          echo "Results committed successfully"
        else
          echo "No changes to commit"
        fi
    
    - name: Upload results as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: analysis-results-${{ github.run_number }}
        path: |
          analysis/
          charts/
          run_analysis.py
        retention-days: 30
        if-no-files-found: warn
    
    - name: Summary
      if: always()
      run: |
        echo "================================"
        echo "ANALYSIS SUMMARY"
        echo "================================"
        echo "Tickers: ${{ github.event.inputs.tickers }}"
        echo "Max Stocks: ${{ github.event.inputs.max_stocks }}"
        echo "Mode: ${{ github.event.inputs.analysis_mode }}"
        echo "Status: ${{ job.status }}"
        echo "Time: $(date)"
        echo "================================"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Analysis completed successfully!"
          echo "üìÅ Check the 'analysis' and 'charts' directories for results"
          echo "üì• Download artifacts from the Actions tab"
        else
          echo "‚ùå Analysis failed - check the logs above"
        fi
