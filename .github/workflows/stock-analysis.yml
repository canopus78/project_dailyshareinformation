name: Stock Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      tickers:
        description: 'Stock tickers to analyze (comma-separated, e.g., AAPL,GOOGL,MSFT)'
        required: true
        default: 'AAPL,GOOGL,MSFT,TSLA,NVDA'
        type: string
      
      max_stocks:
        description: 'Maximum number of stocks to analyze'
        required: false
        default: '5'
        type: choice
        options:
        - '3'
        - '5'
        - '8'
        - '10'
      
      analysis_depth:
        description: 'Analysis depth'
        required: false
        default: 'standard'
        type: choice
        options:
        - 'quick'
        - 'standard'
        - 'detailed'
      
      send_notification:
        description: 'Send webhook notification when complete'
        required: false
        default: true
        type: boolean
      
      create_charts:
        description: 'Generate technical analysis charts'
        required: false
        default: true
        type: boolean

jobs:
  analyze-stocks:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        echo "Installing Python packages..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Dependencies installed successfully"
    
    - name: Verify Setup
      run: |
        echo "Verifying environment..."
        python --version
        echo "Current directory: $(pwd)"
        echo "Project structure:"
        find . -type f -name "*.py" | head -10
        echo "Checking API key..."
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "ERROR: OPENAI_API_KEY not found in secrets!"
          exit 1
        else
          echo "OPENAI_API_KEY found"
        fi
    
    - name: Run Manual Stock Analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        MANUAL_TICKERS: ${{ github.event.inputs.tickers }}
        MAX_STOCKS: ${{ github.event.inputs.max_stocks }}
        ANALYSIS_DEPTH: ${{ github.event.inputs.analysis_depth }}
        CREATE_CHARTS: ${{ github.event.inputs.create_charts }}
        SEND_NOTIFICATION: ${{ github.event.inputs.send_notification }}
      run: |
        echo "Starting Manual Stock Analysis..."
        echo "=================================="
        echo "Input Parameters:"
        echo "  - Tickers: $MANUAL_TICKERS"
        echo "  - Max Stocks: $MAX_STOCKS"
        echo "  - Analysis Depth: $ANALYSIS_DEPTH"
        echo "  - Create Charts: $CREATE_CHARTS"
        echo "  - Send Notification: $SEND_NOTIFICATION"
        echo "=================================="
        
        # Create a simple Python runner that uses the existing main.py
        python -c "
import os
import sys
sys.path.append('src')

# Set custom parameters as environment variables for main.py to use
tickers = os.getenv('MANUAL_TICKERS', '').strip()
if tickers:
    # Override the default tickers in settings
    tickers_list = [t.strip().upper() for t in tickers.split(',') if t.strip()]
    max_stocks = int(os.getenv('MAX_STOCKS', '5'))
    tickers_list = tickers_list[:max_stocks]
    
    print(f'Custom tickers: {tickers_list}')
    
    # Temporarily modify the settings
    from config.settings import settings
    settings.DEFAULT_TICKERS = tickers_list
    
    # Adjust analysis depth
    analysis_depth = os.getenv('ANALYSIS_DEPTH', 'standard')
    if analysis_depth == 'quick':
        settings.MAX_TOKENS = 1500
        settings.TEMPERATURE = 0.5
    elif analysis_depth == 'detailed':
        settings.MAX_TOKENS = 3000
        settings.TEMPERATURE = 0.2
    
    print(f'Analysis depth: {analysis_depth}')
    print(f'Max tokens: {settings.MAX_TOKENS}')

# Import and run main
try:
    from main import main
    main()
except Exception as e:
    print(f'Error running analysis: {str(e)}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"
    
    - name: Analysis Results Summary
      if: always()
      run: |
        echo "Analysis Results Summary"
        echo "========================"
        
        # Count files
        analysis_count=0
        chart_count=0
        
        if [ -d "analysis" ]; then
          analysis_count=$(find analysis/ -name "*.json" -o -name "*.html" -o -name "*.txt" 2>/dev/null | wc -l)
        fi
        
        if [ -d "charts" ]; then
          chart_count=$(find charts/ -name "*.png" 2>/dev/null | wc -l)
        fi
        
        echo "Analysis files: $analysis_count"
        echo "Chart files: $chart_count"
        
        # Show latest files
        echo ""
        echo "Generated Files:"
        echo "================"
        
        if [ "$analysis_count" -gt 0 ]; then
          echo "Analysis Reports:"
          find analysis/ -type f 2>/dev/null | head -5 | while read file; do
            if [ -f "$file" ]; then
              size=$(ls -lh "$file" 2>/dev/null | awk '{print $5}' || echo "unknown")
              echo "  $file ($size)"
            fi
          done
        fi
        
        if [ "$chart_count" -gt 0 ]; then
          echo "Technical Charts:"
          find charts/ -type f -name "*.png" 2>/dev/null | head -5 | while read file; do
            if [ -f "$file" ]; then
              size=$(ls -lh "$file" 2>/dev/null | awk '{print $5}' || echo "unknown")
              echo "  $file ($size)"
            fi
          done
        fi
        
        # Show disk usage
        echo ""
        echo "Storage Usage:"
        if [ -d "analysis" ] || [ -d "charts" ]; then
          du -sh analysis/ charts/ 2>/dev/null || echo "Could not calculate size"
        else
          echo "No directories created"
        fi
    
    - name: Commit Results
      if: success()
      run: |
        echo "Committing analysis results..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions Bot"
        
        # Add all generated files
        git add . 2>/dev/null || true
        
        # Check for changes
        if git diff --staged --quiet; then
          echo "No new files to commit"
        else
          # Create commit message
          timestamp=$(date '+%Y-%m-%d %H:%M UTC')
          commit_msg="Manual stock analysis: ${{ github.event.inputs.tickers }} ($timestamp)"
          
          git commit -m "$commit_msg"
          git push
          echo "Results committed successfully"
        fi
    
    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: manual-analysis-results-${{ github.run_number }}
        path: |
          analysis/
          charts/
          *.log
        retention-days: 30
        if-no-files-found: warn
    
    - name: Completion Summary
      if: always()
      run: |
        echo "=================================="
        echo "Manual Analysis Complete!"
        echo "=================================="
        echo "Tickers: ${{ github.event.inputs.tickers }}"
        echo "Depth: ${{ github.event.inputs.analysis_depth }}"
        echo "Max Stocks: ${{ github.event.inputs.max_stocks }}"
        echo "Charts: ${{ github.event.inputs.create_charts }}"
        echo "Notifications: ${{ github.event.inputs.send_notification }}"
        echo "Completed: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "Results are available in:"
        echo "- Repository: analysis/ and charts/ directories"
        echo "- Artifacts: Download from Actions tab"
        echo ""
        if [ "${{ job.status }}" = "success" ]; then
          echo "Status: SUCCESS ✅"
        else
          echo "Status: FAILED ❌"
        fi
        echo "=================================="
